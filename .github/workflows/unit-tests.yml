name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      run_cuda_tests:
        description: 'Run CUDA tests (requires GPU runners)'
        required: false
        default: 'false'
        type: boolean

env:
  CMAKE_VERSION: 3.21.0
  CUDA_VERSION: 11.8

jobs:
  # Code quality and static analysis
  code-quality:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/vcpkg
          key: quality-${{ runner.os }}-${{ hashFiles('**/CMakeLists.txt') }}

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            cppcheck \
            clang-tidy \
            clang-format \
            doxygen \
            graphviz

      - name: Run cppcheck
        run: |
          cppcheck --enable=all --inconclusive --xml --xml-version=2 \
            --suppress=missingIncludeSystem \
            --suppress=unusedFunction \
            src/ 2> cppcheck-report.xml || true

      - name: Run clang-format check
        run: |
          find src/ tests/ -name "*.cpp" -o -name "*.hpp" -o -name "*.cu" -o -name "*.cuh" | \
          xargs clang-format --dry-run --Werror

      - name: Upload code quality reports
        uses: actions/upload-artifact@v4
        with:
          name: code-quality-reports
          path: |
            cppcheck-report.xml
          retention-days: 30

  # Build matrix for different configurations
  build-test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, ubuntu-20.04]
        compiler: [gcc-11, clang-14]
        build-type: [Release, Debug]
        cuda: [ON, OFF]
        exclude:
          # Skip some combinations to reduce CI time
          - os: ubuntu-20.04
            compiler: clang-14
          - build-type: Debug
            cuda: ON

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Cache CMake build
        uses: actions/cache@v4
        with:
          path: |
            build
            ~/.cache/vcpkg
          key: build-${{ matrix.os }}-${{ matrix.compiler }}-${{ matrix.build-type }}-${{ matrix.cuda }}-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            build-${{ matrix.os }}-${{ matrix.compiler }}-${{ matrix.build-type }}-${{ matrix.cuda }}-
            build-${{ matrix.os }}-${{ matrix.compiler }}-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            ninja-build \
            pkg-config \
            libcurl4-openssl-dev \
            libssl-dev \
            libyaml-cpp-dev \
            libpqxx-dev \
            libpq-dev \
            libhiredis-dev \
            libglm-dev \
            libtbb-dev

      - name: Install GCC 11
        if: matrix.compiler == 'gcc-11'
        run: |
          sudo apt-get install -y gcc-11 g++-11

      - name: Install Clang 14
        if: matrix.compiler == 'clang-14'
        run: |
          sudo apt-get install -y clang-14 libc++-14-dev libc++abi-14-dev

      - name: Install CUDA Toolkit
        if: matrix.cuda == 'ON'
        uses: Jimver/cuda-toolkit@v0.2.14
        with:
          cuda: ${{ env.CUDA_VERSION }}
          method: network
          non-cuda-sub-packages: '["libcublas-dev"]'

      - name: Configure CMake
        run: |
          # Set compiler based on matrix
          if [[ "${{ matrix.compiler }}" == "gcc-11" ]]; then
            export CC=gcc-11
            export CXX=g++-11
          elif [[ "${{ matrix.compiler }}" == "clang-14" ]]; then
            export CC=clang-14
            export CXX=clang++-14
          fi
          
          cmake -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} \
            -DCMAKE_C_COMPILER=$CC \
            -DCMAKE_CXX_COMPILER=$CXX \
            -DSEP_USE_CUDA=${{ matrix.cuda }} \
            -DSEP_USE_GUI=OFF \
            -DSEP_USE_TBB=ON \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
            -DENABLE_TESTING=ON

      - name: Build
        run: |
          cmake --build build --parallel $(nproc)

      - name: Run unit tests
        run: |
          cd build
          ctest --output-on-failure --parallel $(nproc)

      - name: Run integration tests
        if: matrix.build-type == 'Release'
        run: |
          cd build
          if [[ -f tests/test_integration ]]; then
            ./tests/test_integration
          fi

      - name: Validate pitch claim matrix
        if: matrix.build-type == 'Release' && matrix.compiler == 'gcc-11'
        run: |
          if [[ -f scripts/check_validation_matrix.py ]]; then
            python3 scripts/check_validation_matrix.py
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: matrix.build-type == 'Release' && matrix.compiler == 'gcc-11' && matrix.os == 'ubuntu-22.04'
        with:
          name: sep-trader-${{ matrix.cuda == 'ON' && 'cuda' || 'cpu' }}
          path: |
            build/src/sep_trader
            build/tests/test_*
          retention-days: 7

  # Docker build and test
  docker-build:
    runs-on: ubuntu-22.04
    needs: [code-quality]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: docker-${{ runner.os }}-${{ hashFiles('Dockerfile.sep-trader') }}
          restore-keys: |
            docker-${{ runner.os }}-

      - name: Build Docker image
        run: |
          docker build -f Dockerfile.sep-trader -t sep-trader:test .

      - name: Test Docker image
        run: |
          # Test basic functionality
          docker run --rm sep-trader:test /bin/bash -c "which cmake && which g++ && which nvcc"

      - name: Run container tests
        run: |
          docker-compose -f docker-compose.yml config
          docker-compose -f docker-compose.yml build

  # Security scanning
  security-scan:
    runs-on: ubuntu-22.04
    if: github.event_name != 'pull_request' || github.actor != 'dependabot[bot]'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
