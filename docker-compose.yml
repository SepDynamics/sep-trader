services:
  # Trading backend service
  trading-backend:
    build:
      context: .
      dockerfile: scripts/Dockerfile.backend
    container_name: sep-trading-backend
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - SEP_CONFIG_PATH=/app/config
      - PYTHONPATH=/app
      - PORT=5000
    env_file:
      - ./config/.sep-config.env
    volumes:
      - ./config:/app/config:ro
      - ./data:/app/data
      - ./logs:/app/logs
      - ./output:/app/output
      - ./bin:/app/bin:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - sep-network

  # WebSocket service for real-time updates
  websocket-service:
    build:
      context: .
      dockerfile: scripts/Dockerfile.websocket
    container_name: sep-websocket
    restart: unless-stopped
    ports:
      - "8765:8765"
    environment:
      - WS_HOST=0.0.0.0
      - WS_PORT=8765
    env_file:
      - ./config/.sep-config.env
    # Healthcheck disabled - WebSocket service doesn't have a standard HTTP endpoint
    # The service is working correctly as evidenced by the logs
    networks:
      - sep-network

  # Frontend web application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: sep-frontend
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    environment:
      - REACT_APP_API_URL=http://localhost:5000
      - REACT_APP_WS_URL=ws://localhost:8765
      - REACT_APP_ENVIRONMENT=development
    depends_on:
      trading-backend:
        condition: service_healthy
      websocket-service:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sep-network

networks:
  sep-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16

# No volumes needed - using remote Valkey/Redis service