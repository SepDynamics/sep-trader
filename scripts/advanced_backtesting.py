#!/usr/bin/env python3
"""Advanced backtesting integration for SEP Engine.

This script loads a metrics CSV generated by ``pme_testbed`` or
``pattern_metric_example`` and runs a grid search over
strategy thresholds. The best parameters and performance
metrics are printed in JSON format.
"""

import argparse
import json
from pathlib import Path

from _sep.testbed.backtest_compare import load_dataset, run_backtest, performance_summary
from _sep.testbed.threshold_optimizer import frange


def grid_search(df, conf_range, coh_range, stab_range):
    best_params = None
    best_summary = None
    best_pips = float("-inf")

    for conf in conf_range:
        for coh in coh_range:
            for stab in stab_range:
                params = {"conf": conf, "coh": coh, "stab": stab}
                daily, _, _, final_pips = run_backtest(df.copy(), params)
                summary = performance_summary(daily.cumsum())
                if final_pips > best_pips:
                    best_pips = final_pips
                    best_params = params
                    best_summary = summary
    return best_params, best_pips, best_summary


def main() -> None:
    parser = argparse.ArgumentParser(description="Run advanced backtesting grid search")
    parser.add_argument("data", help="CSV dataset from pme_testbed")
    parser.add_argument("--conf", default="0.6,0.9,0.05",
                        help="start,end,step for confidence threshold")
    parser.add_argument("--coh", default="0.6,0.9,0.05",
                        help="start,end,step for coherence threshold")
    parser.add_argument("--stab", default="0.0,0.5,0.1",
                        help="start,end,step for stability threshold")
    args = parser.parse_args()

    df = load_dataset(args.data)

    conf_start, conf_end, conf_step = (float(x) for x in args.conf.split(","))
    coh_start, coh_end, coh_step = (float(x) for x in args.coh.split(","))
    stab_start, stab_end, stab_step = (float(x) for x in args.stab.split(","))

    conf_range = list(frange(conf_start, conf_end, conf_step))
    coh_range = list(frange(coh_start, coh_end, coh_step))
    stab_range = list(frange(stab_start, stab_end, stab_step))

    best_params, best_pips, best_summary = grid_search(df, conf_range, coh_range, stab_range)

    result = {
        "best_params": best_params,
        "final_pips": round(best_pips, 5),
        "sharpe_ratio": best_summary["sharpe_ratio"],
        "max_drawdown": best_summary["max_drawdown"],
    }

    print(json.dumps(result, indent=2))


if __name__ == "__main__":
    main()
